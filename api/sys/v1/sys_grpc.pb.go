// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	common "drpshop/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysServiceClient is the client API for SysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysServiceClient interface {
	// 图片验证码
	CaptchaImg(ctx context.Context, in *CaptchaImgReq, opts ...grpc.CallOption) (*CaptchaImgRes, error)
	// 发送验证码
	Captcha(ctx context.Context, in *CaptchaReq, opts ...grpc.CallOption) (*common.NullRes, error)
	//用户-------
	//用户登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	//检测rbac
	CheckCasbin(ctx context.Context, in *CheckCasbinReq, opts ...grpc.CallOption) (*CommonRes, error)
	//获取个人信息
	UserProfile(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserListData, error)
	//修改个人信息
	UserProfileSet(ctx context.Context, in *UserProfileSetReq, opts ...grpc.CallOption) (*CommonRes, error)
	//获取用户
	UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRes, error)
	//创建用户
	UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*CommonRes, error)
	//列表用户信息
	UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error)
	//修改用户数据
	UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*CommonRes, error)
	//删除用户数据
	UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*CommonRes, error)
	//重置用户密码
	ReSetPassword(ctx context.Context, in *ReSetPasswordReq, opts ...grpc.CallOption) (*CommonRes, error)
	//修改用户密码
	ChangePwd(ctx context.Context, in *ChangePwdReq, opts ...grpc.CallOption) (*CommonRes, error)
	//修改用户状态
	UpdateUserStatus(ctx context.Context, in *UserStatusReq, opts ...grpc.CallOption) (*CommonRes, error)
	//获取角色和岗位列表
	GetUserPostRoleList(ctx context.Context, in *common.NullReq, opts ...grpc.CallOption) (*UserPostRoleListRes, error)
	//登录IP更新
	LoginUserUpdate(ctx context.Context, in *LoginUserUpdateReq, opts ...grpc.CallOption) (*CommonRes, error)
	//角色------
	//创建角色
	RoleAdd(ctx context.Context, in *RoleAddReq, opts ...grpc.CallOption) (*CommonRes, error)
	//角色列表数据
	RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListRes, error)
	//修改用户角色
	RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*CommonRes, error)
	//删除用户角色
	RoleDelete(ctx context.Context, in *RoleDeleteReq, opts ...grpc.CallOption) (*CommonRes, error)
	//修改角色状态
	UpdateRoleStatus(ctx context.Context, in *UpdateRoleStatusReq, opts ...grpc.CallOption) (*CommonRes, error)
	//获取角色的权限菜单
	GetMenusByRoleId(ctx context.Context, in *QueryMenuByRoleIdReq, opts ...grpc.CallOption) (*QueryMenuByRoleIdRes, error)
	//更新角色的权限菜单
	UpdateMenuRole(ctx context.Context, in *UpdateMenuRoleReq, opts ...grpc.CallOption) (*CommonRes, error)
	//获取角色的权限接口
	GetApisByRoleId(ctx context.Context, in *QueryApisByRoleIdReq, opts ...grpc.CallOption) (*QueryApisByRoleIdRes, error)
	//更新角色的权限接口
	UpdateRoleApisById(ctx context.Context, in *UpdateApisRoleReq, opts ...grpc.CallOption) (*CommonRes, error)
	//菜单----
	//获取菜单列表
	MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListRes, error)
	//获取菜单树
	MenuTreeList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuTreeListRes, error)
	//创建菜单
	MenuAdd(ctx context.Context, in *MenuAddReq, opts ...grpc.CallOption) (*CommonRes, error)
	//更新菜单
	MenuUpdate(ctx context.Context, in *MenuUpdateReq, opts ...grpc.CallOption) (*CommonRes, error)
	//批量删除菜单
	MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...grpc.CallOption) (*CommonRes, error)
	//获取用户的可访问菜单列表
	MenuListByUserId(ctx context.Context, in *MenuUserReq, opts ...grpc.CallOption) (*MenuListRes, error)
	//获取用户的可访问菜单树
	MenuTreeListByUserId(ctx context.Context, in *MenuUserReq, opts ...grpc.CallOption) (*MenuTreeListRes, error)
	//字典数据---
	//添加字典数据
	DictDataAdd(ctx context.Context, in *DictDataAddReq, opts ...grpc.CallOption) (*CommonRes, error)
	//字典数据列表
	DictDataList(ctx context.Context, in *DictDataListReq, opts ...grpc.CallOption) (*DictDataListRes, error)
	//修改字典数据
	DictDataUpdate(ctx context.Context, in *DictDataUpdateReq, opts ...grpc.CallOption) (*CommonRes, error)
	//删除字典数据
	DictDataDelete(ctx context.Context, in *DictDataDeleteReq, opts ...grpc.CallOption) (*CommonRes, error)
	//通过编码获取字典数据
	DictDataInfoByDictCode(ctx context.Context, in *DictDataInfoByDictCodeReq, opts ...grpc.CallOption) (*DictDataListData, error)
	//数据字典根据key获取
	DictDataListByDictType(ctx context.Context, in *DictDataListByDictTypeReq, opts ...grpc.CallOption) (*DictDataListRes, error)
	//获取字典分类列表---
	//添加字典分类数据
	DictTypeAdd(ctx context.Context, in *DictTypeAddReq, opts ...grpc.CallOption) (*CommonRes, error)
	//获取字典分类列表
	DictTypeList(ctx context.Context, in *DictTypeListReq, opts ...grpc.CallOption) (*DictTypeListRes, error)
	//获取字典分类info
	DictTypeInfo(ctx context.Context, in *DictTypeInfoReq, opts ...grpc.CallOption) (*DictTypeListData, error)
	//修改字典分类数据
	DictTypeUpdate(ctx context.Context, in *DictTypeUpdateReq, opts ...grpc.CallOption) (*CommonRes, error)
	//删除字典分类数据
	DictTypeDelete(ctx context.Context, in *DictTypeDeleteReq, opts ...grpc.CallOption) (*CommonRes, error)
	//获取字典选择框列表
	DictTypeOptionSelect(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*DictTypeListRes, error)
	//登录日志---
	SaveLoginlog(ctx context.Context, in *LoginLogReq, opts ...grpc.CallOption) (*CommonRes, error)
	//登录日志列表
	LoginlogList(ctx context.Context, in *LoginlogListReq, opts ...grpc.CallOption) (*LoginlogListRes, error)
	//删除
	LoginlogDelete(ctx context.Context, in *LoginlogDeleteReq, opts ...grpc.CallOption) (*CommonRes, error)
	//清空
	LoginlogClear(ctx context.Context, in *common.NullReq, opts ...grpc.CallOption) (*CommonRes, error)
	//用户在线---
	SaveUserOnline(ctx context.Context, in *UserOnlineReq, opts ...grpc.CallOption) (*CommonRes, error)
	//操作日志--
	//操作日志列表
	OperLogList(ctx context.Context, in *OperLogListReq, opts ...grpc.CallOption) (*OperLogListRes, error)
	//日志详细
	OperLogInfo(ctx context.Context, in *OperLogInfoReq, opts ...grpc.CallOption) (*OperLogInfoRes, error)
	//操作日志删除
	OperLogDelete(ctx context.Context, in *OperLogDeleteReq, opts ...grpc.CallOption) (*common.NullRes, error)
	//操作日志清空
	OperLogClear(ctx context.Context, in *common.NullReq, opts ...grpc.CallOption) (*common.NullRes, error)
	//操作日志保存
	OperLogSave(ctx context.Context, in *OperLogSaveReq, opts ...grpc.CallOption) (*common.NullRes, error)
	//接口
	//接口详情
	ApisInfo(ctx context.Context, in *ApisInfoReq, opts ...grpc.CallOption) (*ApisInfoRes, error)
	//获取接口列表
	ApisList(ctx context.Context, in *ApisListReq, opts ...grpc.CallOption) (*ApisListRes, error)
	//获取接口树(按接口Category字段分类)
	ApisTreeList(ctx context.Context, in *common.NullReq, opts ...grpc.CallOption) (*ApisTreeListRes, error)
	//创建接口
	ApisAdd(ctx context.Context, in *ApisAddReq, opts ...grpc.CallOption) (*common.NullRes, error)
	//更新接口
	ApisUpdate(ctx context.Context, in *ApisUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error)
	//批量删除接口
	ApisDelete(ctx context.Context, in *ApisDeleteReq, opts ...grpc.CallOption) (*common.NullRes, error)
	//部门
	DeptDetail(ctx context.Context, in *DeptDetailReq, opts ...grpc.CallOption) (*DeptDetailRes, error)
	DeptList(ctx context.Context, in *DeptListReq, opts ...grpc.CallOption) (*DeptListRes, error)
	DeptTree(ctx context.Context, in *DeptListReq, opts ...grpc.CallOption) (*DeptListRes, error)
	DeptCreate(ctx context.Context, in *DeptCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error)
	DeptUpdate(ctx context.Context, in *DeptCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error)
	DeptDelete(ctx context.Context, in *DeptDeleteReq, opts ...grpc.CallOption) (*common.NullRes, error)
	//岗位
	PostDetail(ctx context.Context, in *PostDetailReq, opts ...grpc.CallOption) (*PostDetailRes, error)
	PostList(ctx context.Context, in *PostListReq, opts ...grpc.CallOption) (*PostListRes, error)
	PostCreate(ctx context.Context, in *PostCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error)
	PostUpdate(ctx context.Context, in *PostCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error)
	PostDelete(ctx context.Context, in *PostDeleteReq, opts ...grpc.CallOption) (*common.NullRes, error)
	//配置
	ConfigDetail(ctx context.Context, in *ConfigDetailReq, opts ...grpc.CallOption) (*ConfigDetailRes, error)
	ConfigInfoByKey(ctx context.Context, in *ConfigInfoByKeyReq, opts ...grpc.CallOption) (*ConfigInfoByKeyRes, error)
	ConfigList(ctx context.Context, in *ConfigListReq, opts ...grpc.CallOption) (*ConfigListRes, error)
	ConfigCreate(ctx context.Context, in *ConfigCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error)
	ConfigUpdate(ctx context.Context, in *ConfigCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error)
	ConfigDelete(ctx context.Context, in *ConfigDeleteReq, opts ...grpc.CallOption) (*common.NullRes, error)
}

type sysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysServiceClient(cc grpc.ClientConnInterface) SysServiceClient {
	return &sysServiceClient{cc}
}

func (c *sysServiceClient) CaptchaImg(ctx context.Context, in *CaptchaImgReq, opts ...grpc.CallOption) (*CaptchaImgRes, error) {
	out := new(CaptchaImgRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/CaptchaImg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) Captcha(ctx context.Context, in *CaptchaReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/Captcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) CheckCasbin(ctx context.Context, in *CheckCasbinReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/CheckCasbin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UserProfile(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserListData, error) {
	out := new(UserListData)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UserProfileSet(ctx context.Context, in *UserProfileSetReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UserProfileSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRes, error) {
	out := new(UserInfoRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UserAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error) {
	out := new(UserListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UserDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ReSetPassword(ctx context.Context, in *ReSetPasswordReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ReSetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ChangePwd(ctx context.Context, in *ChangePwdReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ChangePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UpdateUserStatus(ctx context.Context, in *UserStatusReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UpdateUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) GetUserPostRoleList(ctx context.Context, in *common.NullReq, opts ...grpc.CallOption) (*UserPostRoleListRes, error) {
	out := new(UserPostRoleListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/GetUserPostRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) LoginUserUpdate(ctx context.Context, in *LoginUserUpdateReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/LoginUserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) RoleAdd(ctx context.Context, in *RoleAddReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/RoleAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListRes, error) {
	out := new(RoleListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/RoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/RoleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) RoleDelete(ctx context.Context, in *RoleDeleteReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/RoleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UpdateRoleStatus(ctx context.Context, in *UpdateRoleStatusReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UpdateRoleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) GetMenusByRoleId(ctx context.Context, in *QueryMenuByRoleIdReq, opts ...grpc.CallOption) (*QueryMenuByRoleIdRes, error) {
	out := new(QueryMenuByRoleIdRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/GetMenusByRoleId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UpdateMenuRole(ctx context.Context, in *UpdateMenuRoleReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UpdateMenuRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) GetApisByRoleId(ctx context.Context, in *QueryApisByRoleIdReq, opts ...grpc.CallOption) (*QueryApisByRoleIdRes, error) {
	out := new(QueryApisByRoleIdRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/GetApisByRoleId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) UpdateRoleApisById(ctx context.Context, in *UpdateApisRoleReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/UpdateRoleApisById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListRes, error) {
	out := new(MenuListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/MenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) MenuTreeList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuTreeListRes, error) {
	out := new(MenuTreeListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/MenuTreeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) MenuAdd(ctx context.Context, in *MenuAddReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/MenuAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) MenuUpdate(ctx context.Context, in *MenuUpdateReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/MenuUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/MenuDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) MenuListByUserId(ctx context.Context, in *MenuUserReq, opts ...grpc.CallOption) (*MenuListRes, error) {
	out := new(MenuListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/MenuListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) MenuTreeListByUserId(ctx context.Context, in *MenuUserReq, opts ...grpc.CallOption) (*MenuTreeListRes, error) {
	out := new(MenuTreeListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/MenuTreeListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictDataAdd(ctx context.Context, in *DictDataAddReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictDataAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictDataList(ctx context.Context, in *DictDataListReq, opts ...grpc.CallOption) (*DictDataListRes, error) {
	out := new(DictDataListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictDataList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictDataUpdate(ctx context.Context, in *DictDataUpdateReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictDataUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictDataDelete(ctx context.Context, in *DictDataDeleteReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictDataDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictDataInfoByDictCode(ctx context.Context, in *DictDataInfoByDictCodeReq, opts ...grpc.CallOption) (*DictDataListData, error) {
	out := new(DictDataListData)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictDataInfoByDictCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictDataListByDictType(ctx context.Context, in *DictDataListByDictTypeReq, opts ...grpc.CallOption) (*DictDataListRes, error) {
	out := new(DictDataListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictDataListByDictType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictTypeAdd(ctx context.Context, in *DictTypeAddReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictTypeAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictTypeList(ctx context.Context, in *DictTypeListReq, opts ...grpc.CallOption) (*DictTypeListRes, error) {
	out := new(DictTypeListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictTypeInfo(ctx context.Context, in *DictTypeInfoReq, opts ...grpc.CallOption) (*DictTypeListData, error) {
	out := new(DictTypeListData)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictTypeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictTypeUpdate(ctx context.Context, in *DictTypeUpdateReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictTypeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictTypeDelete(ctx context.Context, in *DictTypeDeleteReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictTypeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DictTypeOptionSelect(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*DictTypeListRes, error) {
	out := new(DictTypeListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DictTypeOptionSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) SaveLoginlog(ctx context.Context, in *LoginLogReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/SaveLoginlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) LoginlogList(ctx context.Context, in *LoginlogListReq, opts ...grpc.CallOption) (*LoginlogListRes, error) {
	out := new(LoginlogListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/LoginlogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) LoginlogDelete(ctx context.Context, in *LoginlogDeleteReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/LoginlogDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) LoginlogClear(ctx context.Context, in *common.NullReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/LoginlogClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) SaveUserOnline(ctx context.Context, in *UserOnlineReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/SaveUserOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) OperLogList(ctx context.Context, in *OperLogListReq, opts ...grpc.CallOption) (*OperLogListRes, error) {
	out := new(OperLogListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/OperLogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) OperLogInfo(ctx context.Context, in *OperLogInfoReq, opts ...grpc.CallOption) (*OperLogInfoRes, error) {
	out := new(OperLogInfoRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/OperLogInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) OperLogDelete(ctx context.Context, in *OperLogDeleteReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/OperLogDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) OperLogClear(ctx context.Context, in *common.NullReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/OperLogClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) OperLogSave(ctx context.Context, in *OperLogSaveReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/OperLogSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ApisInfo(ctx context.Context, in *ApisInfoReq, opts ...grpc.CallOption) (*ApisInfoRes, error) {
	out := new(ApisInfoRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ApisInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ApisList(ctx context.Context, in *ApisListReq, opts ...grpc.CallOption) (*ApisListRes, error) {
	out := new(ApisListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ApisList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ApisTreeList(ctx context.Context, in *common.NullReq, opts ...grpc.CallOption) (*ApisTreeListRes, error) {
	out := new(ApisTreeListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ApisTreeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ApisAdd(ctx context.Context, in *ApisAddReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ApisAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ApisUpdate(ctx context.Context, in *ApisUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ApisUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ApisDelete(ctx context.Context, in *ApisDeleteReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ApisDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DeptDetail(ctx context.Context, in *DeptDetailReq, opts ...grpc.CallOption) (*DeptDetailRes, error) {
	out := new(DeptDetailRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DeptDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DeptList(ctx context.Context, in *DeptListReq, opts ...grpc.CallOption) (*DeptListRes, error) {
	out := new(DeptListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DeptList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DeptTree(ctx context.Context, in *DeptListReq, opts ...grpc.CallOption) (*DeptListRes, error) {
	out := new(DeptListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DeptTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DeptCreate(ctx context.Context, in *DeptCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DeptCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DeptUpdate(ctx context.Context, in *DeptCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DeptUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) DeptDelete(ctx context.Context, in *DeptDeleteReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/DeptDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) PostDetail(ctx context.Context, in *PostDetailReq, opts ...grpc.CallOption) (*PostDetailRes, error) {
	out := new(PostDetailRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/PostDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) PostList(ctx context.Context, in *PostListReq, opts ...grpc.CallOption) (*PostListRes, error) {
	out := new(PostListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/PostList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) PostCreate(ctx context.Context, in *PostCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/PostCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) PostUpdate(ctx context.Context, in *PostCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/PostUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) PostDelete(ctx context.Context, in *PostDeleteReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/PostDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ConfigDetail(ctx context.Context, in *ConfigDetailReq, opts ...grpc.CallOption) (*ConfigDetailRes, error) {
	out := new(ConfigDetailRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ConfigDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ConfigInfoByKey(ctx context.Context, in *ConfigInfoByKeyReq, opts ...grpc.CallOption) (*ConfigInfoByKeyRes, error) {
	out := new(ConfigInfoByKeyRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ConfigInfoByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ConfigList(ctx context.Context, in *ConfigListReq, opts ...grpc.CallOption) (*ConfigListRes, error) {
	out := new(ConfigListRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ConfigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ConfigCreate(ctx context.Context, in *ConfigCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ConfigCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ConfigUpdate(ctx context.Context, in *ConfigCreateUpdateReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ConfigUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) ConfigDelete(ctx context.Context, in *ConfigDeleteReq, opts ...grpc.CallOption) (*common.NullRes, error) {
	out := new(common.NullRes)
	err := c.cc.Invoke(ctx, "/api.sys.v1.SysService/ConfigDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysServiceServer is the server API for SysService service.
// All implementations must embed UnimplementedSysServiceServer
// for forward compatibility
type SysServiceServer interface {
	// 图片验证码
	CaptchaImg(context.Context, *CaptchaImgReq) (*CaptchaImgRes, error)
	// 发送验证码
	Captcha(context.Context, *CaptchaReq) (*common.NullRes, error)
	//用户-------
	//用户登录
	Login(context.Context, *LoginReq) (*LoginRes, error)
	//检测rbac
	CheckCasbin(context.Context, *CheckCasbinReq) (*CommonRes, error)
	//获取个人信息
	UserProfile(context.Context, *UserInfoReq) (*UserListData, error)
	//修改个人信息
	UserProfileSet(context.Context, *UserProfileSetReq) (*CommonRes, error)
	//获取用户
	UserInfo(context.Context, *UserInfoReq) (*UserInfoRes, error)
	//创建用户
	UserAdd(context.Context, *UserAddReq) (*CommonRes, error)
	//列表用户信息
	UserList(context.Context, *UserListReq) (*UserListRes, error)
	//修改用户数据
	UserUpdate(context.Context, *UserUpdateReq) (*CommonRes, error)
	//删除用户数据
	UserDelete(context.Context, *UserDeleteReq) (*CommonRes, error)
	//重置用户密码
	ReSetPassword(context.Context, *ReSetPasswordReq) (*CommonRes, error)
	//修改用户密码
	ChangePwd(context.Context, *ChangePwdReq) (*CommonRes, error)
	//修改用户状态
	UpdateUserStatus(context.Context, *UserStatusReq) (*CommonRes, error)
	//获取角色和岗位列表
	GetUserPostRoleList(context.Context, *common.NullReq) (*UserPostRoleListRes, error)
	//登录IP更新
	LoginUserUpdate(context.Context, *LoginUserUpdateReq) (*CommonRes, error)
	//角色------
	//创建角色
	RoleAdd(context.Context, *RoleAddReq) (*CommonRes, error)
	//角色列表数据
	RoleList(context.Context, *RoleListReq) (*RoleListRes, error)
	//修改用户角色
	RoleUpdate(context.Context, *RoleUpdateReq) (*CommonRes, error)
	//删除用户角色
	RoleDelete(context.Context, *RoleDeleteReq) (*CommonRes, error)
	//修改角色状态
	UpdateRoleStatus(context.Context, *UpdateRoleStatusReq) (*CommonRes, error)
	//获取角色的权限菜单
	GetMenusByRoleId(context.Context, *QueryMenuByRoleIdReq) (*QueryMenuByRoleIdRes, error)
	//更新角色的权限菜单
	UpdateMenuRole(context.Context, *UpdateMenuRoleReq) (*CommonRes, error)
	//获取角色的权限接口
	GetApisByRoleId(context.Context, *QueryApisByRoleIdReq) (*QueryApisByRoleIdRes, error)
	//更新角色的权限接口
	UpdateRoleApisById(context.Context, *UpdateApisRoleReq) (*CommonRes, error)
	//菜单----
	//获取菜单列表
	MenuList(context.Context, *MenuListReq) (*MenuListRes, error)
	//获取菜单树
	MenuTreeList(context.Context, *MenuListReq) (*MenuTreeListRes, error)
	//创建菜单
	MenuAdd(context.Context, *MenuAddReq) (*CommonRes, error)
	//更新菜单
	MenuUpdate(context.Context, *MenuUpdateReq) (*CommonRes, error)
	//批量删除菜单
	MenuDelete(context.Context, *MenuDeleteReq) (*CommonRes, error)
	//获取用户的可访问菜单列表
	MenuListByUserId(context.Context, *MenuUserReq) (*MenuListRes, error)
	//获取用户的可访问菜单树
	MenuTreeListByUserId(context.Context, *MenuUserReq) (*MenuTreeListRes, error)
	//字典数据---
	//添加字典数据
	DictDataAdd(context.Context, *DictDataAddReq) (*CommonRes, error)
	//字典数据列表
	DictDataList(context.Context, *DictDataListReq) (*DictDataListRes, error)
	//修改字典数据
	DictDataUpdate(context.Context, *DictDataUpdateReq) (*CommonRes, error)
	//删除字典数据
	DictDataDelete(context.Context, *DictDataDeleteReq) (*CommonRes, error)
	//通过编码获取字典数据
	DictDataInfoByDictCode(context.Context, *DictDataInfoByDictCodeReq) (*DictDataListData, error)
	//数据字典根据key获取
	DictDataListByDictType(context.Context, *DictDataListByDictTypeReq) (*DictDataListRes, error)
	//获取字典分类列表---
	//添加字典分类数据
	DictTypeAdd(context.Context, *DictTypeAddReq) (*CommonRes, error)
	//获取字典分类列表
	DictTypeList(context.Context, *DictTypeListReq) (*DictTypeListRes, error)
	//获取字典分类info
	DictTypeInfo(context.Context, *DictTypeInfoReq) (*DictTypeListData, error)
	//修改字典分类数据
	DictTypeUpdate(context.Context, *DictTypeUpdateReq) (*CommonRes, error)
	//删除字典分类数据
	DictTypeDelete(context.Context, *DictTypeDeleteReq) (*CommonRes, error)
	//获取字典选择框列表
	DictTypeOptionSelect(context.Context, *CommonReq) (*DictTypeListRes, error)
	//登录日志---
	SaveLoginlog(context.Context, *LoginLogReq) (*CommonRes, error)
	//登录日志列表
	LoginlogList(context.Context, *LoginlogListReq) (*LoginlogListRes, error)
	//删除
	LoginlogDelete(context.Context, *LoginlogDeleteReq) (*CommonRes, error)
	//清空
	LoginlogClear(context.Context, *common.NullReq) (*CommonRes, error)
	//用户在线---
	SaveUserOnline(context.Context, *UserOnlineReq) (*CommonRes, error)
	//操作日志--
	//操作日志列表
	OperLogList(context.Context, *OperLogListReq) (*OperLogListRes, error)
	//日志详细
	OperLogInfo(context.Context, *OperLogInfoReq) (*OperLogInfoRes, error)
	//操作日志删除
	OperLogDelete(context.Context, *OperLogDeleteReq) (*common.NullRes, error)
	//操作日志清空
	OperLogClear(context.Context, *common.NullReq) (*common.NullRes, error)
	//操作日志保存
	OperLogSave(context.Context, *OperLogSaveReq) (*common.NullRes, error)
	//接口
	//接口详情
	ApisInfo(context.Context, *ApisInfoReq) (*ApisInfoRes, error)
	//获取接口列表
	ApisList(context.Context, *ApisListReq) (*ApisListRes, error)
	//获取接口树(按接口Category字段分类)
	ApisTreeList(context.Context, *common.NullReq) (*ApisTreeListRes, error)
	//创建接口
	ApisAdd(context.Context, *ApisAddReq) (*common.NullRes, error)
	//更新接口
	ApisUpdate(context.Context, *ApisUpdateReq) (*common.NullRes, error)
	//批量删除接口
	ApisDelete(context.Context, *ApisDeleteReq) (*common.NullRes, error)
	//部门
	DeptDetail(context.Context, *DeptDetailReq) (*DeptDetailRes, error)
	DeptList(context.Context, *DeptListReq) (*DeptListRes, error)
	DeptTree(context.Context, *DeptListReq) (*DeptListRes, error)
	DeptCreate(context.Context, *DeptCreateUpdateReq) (*common.NullRes, error)
	DeptUpdate(context.Context, *DeptCreateUpdateReq) (*common.NullRes, error)
	DeptDelete(context.Context, *DeptDeleteReq) (*common.NullRes, error)
	//岗位
	PostDetail(context.Context, *PostDetailReq) (*PostDetailRes, error)
	PostList(context.Context, *PostListReq) (*PostListRes, error)
	PostCreate(context.Context, *PostCreateUpdateReq) (*common.NullRes, error)
	PostUpdate(context.Context, *PostCreateUpdateReq) (*common.NullRes, error)
	PostDelete(context.Context, *PostDeleteReq) (*common.NullRes, error)
	//配置
	ConfigDetail(context.Context, *ConfigDetailReq) (*ConfigDetailRes, error)
	ConfigInfoByKey(context.Context, *ConfigInfoByKeyReq) (*ConfigInfoByKeyRes, error)
	ConfigList(context.Context, *ConfigListReq) (*ConfigListRes, error)
	ConfigCreate(context.Context, *ConfigCreateUpdateReq) (*common.NullRes, error)
	ConfigUpdate(context.Context, *ConfigCreateUpdateReq) (*common.NullRes, error)
	ConfigDelete(context.Context, *ConfigDeleteReq) (*common.NullRes, error)
	mustEmbedUnimplementedSysServiceServer()
}

// UnimplementedSysServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSysServiceServer struct {
}

func (UnimplementedSysServiceServer) CaptchaImg(context.Context, *CaptchaImgReq) (*CaptchaImgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaImg not implemented")
}
func (UnimplementedSysServiceServer) Captcha(context.Context, *CaptchaReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Captcha not implemented")
}
func (UnimplementedSysServiceServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSysServiceServer) CheckCasbin(context.Context, *CheckCasbinReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCasbin not implemented")
}
func (UnimplementedSysServiceServer) UserProfile(context.Context, *UserInfoReq) (*UserListData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfile not implemented")
}
func (UnimplementedSysServiceServer) UserProfileSet(context.Context, *UserProfileSetReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfileSet not implemented")
}
func (UnimplementedSysServiceServer) UserInfo(context.Context, *UserInfoReq) (*UserInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedSysServiceServer) UserAdd(context.Context, *UserAddReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdd not implemented")
}
func (UnimplementedSysServiceServer) UserList(context.Context, *UserListReq) (*UserListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedSysServiceServer) UserUpdate(context.Context, *UserUpdateReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedSysServiceServer) UserDelete(context.Context, *UserDeleteReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (UnimplementedSysServiceServer) ReSetPassword(context.Context, *ReSetPasswordReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReSetPassword not implemented")
}
func (UnimplementedSysServiceServer) ChangePwd(context.Context, *ChangePwdReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePwd not implemented")
}
func (UnimplementedSysServiceServer) UpdateUserStatus(context.Context, *UserStatusReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedSysServiceServer) GetUserPostRoleList(context.Context, *common.NullReq) (*UserPostRoleListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPostRoleList not implemented")
}
func (UnimplementedSysServiceServer) LoginUserUpdate(context.Context, *LoginUserUpdateReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUserUpdate not implemented")
}
func (UnimplementedSysServiceServer) RoleAdd(context.Context, *RoleAddReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAdd not implemented")
}
func (UnimplementedSysServiceServer) RoleList(context.Context, *RoleListReq) (*RoleListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (UnimplementedSysServiceServer) RoleUpdate(context.Context, *RoleUpdateReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleUpdate not implemented")
}
func (UnimplementedSysServiceServer) RoleDelete(context.Context, *RoleDeleteReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDelete not implemented")
}
func (UnimplementedSysServiceServer) UpdateRoleStatus(context.Context, *UpdateRoleStatusReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleStatus not implemented")
}
func (UnimplementedSysServiceServer) GetMenusByRoleId(context.Context, *QueryMenuByRoleIdReq) (*QueryMenuByRoleIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenusByRoleId not implemented")
}
func (UnimplementedSysServiceServer) UpdateMenuRole(context.Context, *UpdateMenuRoleReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuRole not implemented")
}
func (UnimplementedSysServiceServer) GetApisByRoleId(context.Context, *QueryApisByRoleIdReq) (*QueryApisByRoleIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApisByRoleId not implemented")
}
func (UnimplementedSysServiceServer) UpdateRoleApisById(context.Context, *UpdateApisRoleReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleApisById not implemented")
}
func (UnimplementedSysServiceServer) MenuList(context.Context, *MenuListReq) (*MenuListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuList not implemented")
}
func (UnimplementedSysServiceServer) MenuTreeList(context.Context, *MenuListReq) (*MenuTreeListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuTreeList not implemented")
}
func (UnimplementedSysServiceServer) MenuAdd(context.Context, *MenuAddReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuAdd not implemented")
}
func (UnimplementedSysServiceServer) MenuUpdate(context.Context, *MenuUpdateReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuUpdate not implemented")
}
func (UnimplementedSysServiceServer) MenuDelete(context.Context, *MenuDeleteReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuDelete not implemented")
}
func (UnimplementedSysServiceServer) MenuListByUserId(context.Context, *MenuUserReq) (*MenuListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuListByUserId not implemented")
}
func (UnimplementedSysServiceServer) MenuTreeListByUserId(context.Context, *MenuUserReq) (*MenuTreeListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuTreeListByUserId not implemented")
}
func (UnimplementedSysServiceServer) DictDataAdd(context.Context, *DictDataAddReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataAdd not implemented")
}
func (UnimplementedSysServiceServer) DictDataList(context.Context, *DictDataListReq) (*DictDataListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataList not implemented")
}
func (UnimplementedSysServiceServer) DictDataUpdate(context.Context, *DictDataUpdateReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataUpdate not implemented")
}
func (UnimplementedSysServiceServer) DictDataDelete(context.Context, *DictDataDeleteReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataDelete not implemented")
}
func (UnimplementedSysServiceServer) DictDataInfoByDictCode(context.Context, *DictDataInfoByDictCodeReq) (*DictDataListData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataInfoByDictCode not implemented")
}
func (UnimplementedSysServiceServer) DictDataListByDictType(context.Context, *DictDataListByDictTypeReq) (*DictDataListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataListByDictType not implemented")
}
func (UnimplementedSysServiceServer) DictTypeAdd(context.Context, *DictTypeAddReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeAdd not implemented")
}
func (UnimplementedSysServiceServer) DictTypeList(context.Context, *DictTypeListReq) (*DictTypeListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeList not implemented")
}
func (UnimplementedSysServiceServer) DictTypeInfo(context.Context, *DictTypeInfoReq) (*DictTypeListData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeInfo not implemented")
}
func (UnimplementedSysServiceServer) DictTypeUpdate(context.Context, *DictTypeUpdateReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeUpdate not implemented")
}
func (UnimplementedSysServiceServer) DictTypeDelete(context.Context, *DictTypeDeleteReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeDelete not implemented")
}
func (UnimplementedSysServiceServer) DictTypeOptionSelect(context.Context, *CommonReq) (*DictTypeListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeOptionSelect not implemented")
}
func (UnimplementedSysServiceServer) SaveLoginlog(context.Context, *LoginLogReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLoginlog not implemented")
}
func (UnimplementedSysServiceServer) LoginlogList(context.Context, *LoginlogListReq) (*LoginlogListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginlogList not implemented")
}
func (UnimplementedSysServiceServer) LoginlogDelete(context.Context, *LoginlogDeleteReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginlogDelete not implemented")
}
func (UnimplementedSysServiceServer) LoginlogClear(context.Context, *common.NullReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginlogClear not implemented")
}
func (UnimplementedSysServiceServer) SaveUserOnline(context.Context, *UserOnlineReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserOnline not implemented")
}
func (UnimplementedSysServiceServer) OperLogList(context.Context, *OperLogListReq) (*OperLogListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperLogList not implemented")
}
func (UnimplementedSysServiceServer) OperLogInfo(context.Context, *OperLogInfoReq) (*OperLogInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperLogInfo not implemented")
}
func (UnimplementedSysServiceServer) OperLogDelete(context.Context, *OperLogDeleteReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperLogDelete not implemented")
}
func (UnimplementedSysServiceServer) OperLogClear(context.Context, *common.NullReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperLogClear not implemented")
}
func (UnimplementedSysServiceServer) OperLogSave(context.Context, *OperLogSaveReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperLogSave not implemented")
}
func (UnimplementedSysServiceServer) ApisInfo(context.Context, *ApisInfoReq) (*ApisInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApisInfo not implemented")
}
func (UnimplementedSysServiceServer) ApisList(context.Context, *ApisListReq) (*ApisListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApisList not implemented")
}
func (UnimplementedSysServiceServer) ApisTreeList(context.Context, *common.NullReq) (*ApisTreeListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApisTreeList not implemented")
}
func (UnimplementedSysServiceServer) ApisAdd(context.Context, *ApisAddReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApisAdd not implemented")
}
func (UnimplementedSysServiceServer) ApisUpdate(context.Context, *ApisUpdateReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApisUpdate not implemented")
}
func (UnimplementedSysServiceServer) ApisDelete(context.Context, *ApisDeleteReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApisDelete not implemented")
}
func (UnimplementedSysServiceServer) DeptDetail(context.Context, *DeptDetailReq) (*DeptDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptDetail not implemented")
}
func (UnimplementedSysServiceServer) DeptList(context.Context, *DeptListReq) (*DeptListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptList not implemented")
}
func (UnimplementedSysServiceServer) DeptTree(context.Context, *DeptListReq) (*DeptListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptTree not implemented")
}
func (UnimplementedSysServiceServer) DeptCreate(context.Context, *DeptCreateUpdateReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptCreate not implemented")
}
func (UnimplementedSysServiceServer) DeptUpdate(context.Context, *DeptCreateUpdateReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptUpdate not implemented")
}
func (UnimplementedSysServiceServer) DeptDelete(context.Context, *DeptDeleteReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptDelete not implemented")
}
func (UnimplementedSysServiceServer) PostDetail(context.Context, *PostDetailReq) (*PostDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDetail not implemented")
}
func (UnimplementedSysServiceServer) PostList(context.Context, *PostListReq) (*PostListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostList not implemented")
}
func (UnimplementedSysServiceServer) PostCreate(context.Context, *PostCreateUpdateReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCreate not implemented")
}
func (UnimplementedSysServiceServer) PostUpdate(context.Context, *PostCreateUpdateReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUpdate not implemented")
}
func (UnimplementedSysServiceServer) PostDelete(context.Context, *PostDeleteReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDelete not implemented")
}
func (UnimplementedSysServiceServer) ConfigDetail(context.Context, *ConfigDetailReq) (*ConfigDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigDetail not implemented")
}
func (UnimplementedSysServiceServer) ConfigInfoByKey(context.Context, *ConfigInfoByKeyReq) (*ConfigInfoByKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigInfoByKey not implemented")
}
func (UnimplementedSysServiceServer) ConfigList(context.Context, *ConfigListReq) (*ConfigListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigList not implemented")
}
func (UnimplementedSysServiceServer) ConfigCreate(context.Context, *ConfigCreateUpdateReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigCreate not implemented")
}
func (UnimplementedSysServiceServer) ConfigUpdate(context.Context, *ConfigCreateUpdateReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdate not implemented")
}
func (UnimplementedSysServiceServer) ConfigDelete(context.Context, *ConfigDeleteReq) (*common.NullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigDelete not implemented")
}
func (UnimplementedSysServiceServer) mustEmbedUnimplementedSysServiceServer() {}

// UnsafeSysServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysServiceServer will
// result in compilation errors.
type UnsafeSysServiceServer interface {
	mustEmbedUnimplementedSysServiceServer()
}

func RegisterSysServiceServer(s grpc.ServiceRegistrar, srv SysServiceServer) {
	s.RegisterService(&SysService_ServiceDesc, srv)
}

func _SysService_CaptchaImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaImgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).CaptchaImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/CaptchaImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).CaptchaImg(ctx, req.(*CaptchaImgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_Captcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).Captcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/Captcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).Captcha(ctx, req.(*CaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_CheckCasbin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCasbinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).CheckCasbin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/CheckCasbin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).CheckCasbin(ctx, req.(*CheckCasbinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UserProfile(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UserProfileSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UserProfileSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UserProfileSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UserProfileSet(ctx, req.(*UserProfileSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UserAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UserAdd(ctx, req.(*UserAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UserUpdate(ctx, req.(*UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UserDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UserDelete(ctx, req.(*UserDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ReSetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReSetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ReSetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ReSetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ReSetPassword(ctx, req.(*ReSetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ChangePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ChangePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ChangePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ChangePwd(ctx, req.(*ChangePwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UpdateUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UpdateUserStatus(ctx, req.(*UserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_GetUserPostRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).GetUserPostRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/GetUserPostRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).GetUserPostRoleList(ctx, req.(*common.NullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_LoginUserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).LoginUserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/LoginUserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).LoginUserUpdate(ctx, req.(*LoginUserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_RoleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).RoleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/RoleAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).RoleAdd(ctx, req.(*RoleAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/RoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).RoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_RoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).RoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/RoleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).RoleUpdate(ctx, req.(*RoleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_RoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).RoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/RoleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).RoleDelete(ctx, req.(*RoleDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UpdateRoleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UpdateRoleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UpdateRoleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UpdateRoleStatus(ctx, req.(*UpdateRoleStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_GetMenusByRoleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMenuByRoleIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).GetMenusByRoleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/GetMenusByRoleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).GetMenusByRoleId(ctx, req.(*QueryMenuByRoleIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UpdateMenuRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UpdateMenuRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UpdateMenuRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UpdateMenuRole(ctx, req.(*UpdateMenuRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_GetApisByRoleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApisByRoleIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).GetApisByRoleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/GetApisByRoleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).GetApisByRoleId(ctx, req.(*QueryApisByRoleIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_UpdateRoleApisById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApisRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).UpdateRoleApisById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/UpdateRoleApisById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).UpdateRoleApisById(ctx, req.(*UpdateApisRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_MenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).MenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/MenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).MenuList(ctx, req.(*MenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_MenuTreeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).MenuTreeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/MenuTreeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).MenuTreeList(ctx, req.(*MenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_MenuAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).MenuAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/MenuAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).MenuAdd(ctx, req.(*MenuAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_MenuUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).MenuUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/MenuUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).MenuUpdate(ctx, req.(*MenuUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_MenuDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).MenuDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/MenuDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).MenuDelete(ctx, req.(*MenuDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_MenuListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).MenuListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/MenuListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).MenuListByUserId(ctx, req.(*MenuUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_MenuTreeListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).MenuTreeListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/MenuTreeListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).MenuTreeListByUserId(ctx, req.(*MenuUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictDataAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDataAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictDataAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictDataAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictDataAdd(ctx, req.(*DictDataAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDataListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictDataList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictDataList(ctx, req.(*DictDataListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictDataUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDataUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictDataUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictDataUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictDataUpdate(ctx, req.(*DictDataUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictDataDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDataDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictDataDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictDataDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictDataDelete(ctx, req.(*DictDataDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictDataInfoByDictCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDataInfoByDictCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictDataInfoByDictCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictDataInfoByDictCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictDataInfoByDictCode(ctx, req.(*DictDataInfoByDictCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictDataListByDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDataListByDictTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictDataListByDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictDataListByDictType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictDataListByDictType(ctx, req.(*DictDataListByDictTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictTypeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictTypeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictTypeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictTypeAdd(ctx, req.(*DictTypeAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictTypeList(ctx, req.(*DictTypeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictTypeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictTypeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictTypeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictTypeInfo(ctx, req.(*DictTypeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictTypeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictTypeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictTypeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictTypeUpdate(ctx, req.(*DictTypeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictTypeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictTypeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictTypeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictTypeDelete(ctx, req.(*DictTypeDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DictTypeOptionSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DictTypeOptionSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DictTypeOptionSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DictTypeOptionSelect(ctx, req.(*CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_SaveLoginlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).SaveLoginlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/SaveLoginlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).SaveLoginlog(ctx, req.(*LoginLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_LoginlogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginlogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).LoginlogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/LoginlogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).LoginlogList(ctx, req.(*LoginlogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_LoginlogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginlogDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).LoginlogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/LoginlogDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).LoginlogDelete(ctx, req.(*LoginlogDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_LoginlogClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).LoginlogClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/LoginlogClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).LoginlogClear(ctx, req.(*common.NullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_SaveUserOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).SaveUserOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/SaveUserOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).SaveUserOnline(ctx, req.(*UserOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_OperLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).OperLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/OperLogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).OperLogList(ctx, req.(*OperLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_OperLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperLogInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).OperLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/OperLogInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).OperLogInfo(ctx, req.(*OperLogInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_OperLogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperLogDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).OperLogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/OperLogDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).OperLogDelete(ctx, req.(*OperLogDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_OperLogClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).OperLogClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/OperLogClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).OperLogClear(ctx, req.(*common.NullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_OperLogSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperLogSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).OperLogSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/OperLogSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).OperLogSave(ctx, req.(*OperLogSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ApisInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApisInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ApisInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ApisInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ApisInfo(ctx, req.(*ApisInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ApisList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApisListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ApisList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ApisList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ApisList(ctx, req.(*ApisListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ApisTreeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ApisTreeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ApisTreeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ApisTreeList(ctx, req.(*common.NullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ApisAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApisAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ApisAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ApisAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ApisAdd(ctx, req.(*ApisAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ApisUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApisUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ApisUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ApisUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ApisUpdate(ctx, req.(*ApisUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ApisDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApisDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ApisDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ApisDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ApisDelete(ctx, req.(*ApisDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DeptDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DeptDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DeptDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DeptDetail(ctx, req.(*DeptDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DeptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DeptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DeptList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DeptList(ctx, req.(*DeptListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DeptTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DeptTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DeptTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DeptTree(ctx, req.(*DeptListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DeptCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptCreateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DeptCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DeptCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DeptCreate(ctx, req.(*DeptCreateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DeptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptCreateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DeptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DeptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DeptUpdate(ctx, req.(*DeptCreateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_DeptDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).DeptDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/DeptDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).DeptDelete(ctx, req.(*DeptDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_PostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).PostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/PostDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).PostDetail(ctx, req.(*PostDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_PostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).PostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/PostList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).PostList(ctx, req.(*PostListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_PostCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCreateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).PostCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/PostCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).PostCreate(ctx, req.(*PostCreateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_PostUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCreateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).PostUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/PostUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).PostUpdate(ctx, req.(*PostCreateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_PostDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).PostDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/PostDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).PostDelete(ctx, req.(*PostDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ConfigDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ConfigDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ConfigDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ConfigDetail(ctx, req.(*ConfigDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ConfigInfoByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigInfoByKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ConfigInfoByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ConfigInfoByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ConfigInfoByKey(ctx, req.(*ConfigInfoByKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ConfigList(ctx, req.(*ConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ConfigCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigCreateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ConfigCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ConfigCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ConfigCreate(ctx, req.(*ConfigCreateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigCreateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ConfigUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ConfigUpdate(ctx, req.(*ConfigCreateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_ConfigDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).ConfigDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.SysService/ConfigDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).ConfigDelete(ctx, req.(*ConfigDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysService_ServiceDesc is the grpc.ServiceDesc for SysService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sys.v1.SysService",
	HandlerType: (*SysServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CaptchaImg",
			Handler:    _SysService_CaptchaImg_Handler,
		},
		{
			MethodName: "Captcha",
			Handler:    _SysService_Captcha_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _SysService_Login_Handler,
		},
		{
			MethodName: "CheckCasbin",
			Handler:    _SysService_CheckCasbin_Handler,
		},
		{
			MethodName: "UserProfile",
			Handler:    _SysService_UserProfile_Handler,
		},
		{
			MethodName: "UserProfileSet",
			Handler:    _SysService_UserProfileSet_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _SysService_UserInfo_Handler,
		},
		{
			MethodName: "UserAdd",
			Handler:    _SysService_UserAdd_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _SysService_UserList_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _SysService_UserUpdate_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _SysService_UserDelete_Handler,
		},
		{
			MethodName: "ReSetPassword",
			Handler:    _SysService_ReSetPassword_Handler,
		},
		{
			MethodName: "ChangePwd",
			Handler:    _SysService_ChangePwd_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _SysService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "GetUserPostRoleList",
			Handler:    _SysService_GetUserPostRoleList_Handler,
		},
		{
			MethodName: "LoginUserUpdate",
			Handler:    _SysService_LoginUserUpdate_Handler,
		},
		{
			MethodName: "RoleAdd",
			Handler:    _SysService_RoleAdd_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _SysService_RoleList_Handler,
		},
		{
			MethodName: "RoleUpdate",
			Handler:    _SysService_RoleUpdate_Handler,
		},
		{
			MethodName: "RoleDelete",
			Handler:    _SysService_RoleDelete_Handler,
		},
		{
			MethodName: "UpdateRoleStatus",
			Handler:    _SysService_UpdateRoleStatus_Handler,
		},
		{
			MethodName: "GetMenusByRoleId",
			Handler:    _SysService_GetMenusByRoleId_Handler,
		},
		{
			MethodName: "UpdateMenuRole",
			Handler:    _SysService_UpdateMenuRole_Handler,
		},
		{
			MethodName: "GetApisByRoleId",
			Handler:    _SysService_GetApisByRoleId_Handler,
		},
		{
			MethodName: "UpdateRoleApisById",
			Handler:    _SysService_UpdateRoleApisById_Handler,
		},
		{
			MethodName: "MenuList",
			Handler:    _SysService_MenuList_Handler,
		},
		{
			MethodName: "MenuTreeList",
			Handler:    _SysService_MenuTreeList_Handler,
		},
		{
			MethodName: "MenuAdd",
			Handler:    _SysService_MenuAdd_Handler,
		},
		{
			MethodName: "MenuUpdate",
			Handler:    _SysService_MenuUpdate_Handler,
		},
		{
			MethodName: "MenuDelete",
			Handler:    _SysService_MenuDelete_Handler,
		},
		{
			MethodName: "MenuListByUserId",
			Handler:    _SysService_MenuListByUserId_Handler,
		},
		{
			MethodName: "MenuTreeListByUserId",
			Handler:    _SysService_MenuTreeListByUserId_Handler,
		},
		{
			MethodName: "DictDataAdd",
			Handler:    _SysService_DictDataAdd_Handler,
		},
		{
			MethodName: "DictDataList",
			Handler:    _SysService_DictDataList_Handler,
		},
		{
			MethodName: "DictDataUpdate",
			Handler:    _SysService_DictDataUpdate_Handler,
		},
		{
			MethodName: "DictDataDelete",
			Handler:    _SysService_DictDataDelete_Handler,
		},
		{
			MethodName: "DictDataInfoByDictCode",
			Handler:    _SysService_DictDataInfoByDictCode_Handler,
		},
		{
			MethodName: "DictDataListByDictType",
			Handler:    _SysService_DictDataListByDictType_Handler,
		},
		{
			MethodName: "DictTypeAdd",
			Handler:    _SysService_DictTypeAdd_Handler,
		},
		{
			MethodName: "DictTypeList",
			Handler:    _SysService_DictTypeList_Handler,
		},
		{
			MethodName: "DictTypeInfo",
			Handler:    _SysService_DictTypeInfo_Handler,
		},
		{
			MethodName: "DictTypeUpdate",
			Handler:    _SysService_DictTypeUpdate_Handler,
		},
		{
			MethodName: "DictTypeDelete",
			Handler:    _SysService_DictTypeDelete_Handler,
		},
		{
			MethodName: "DictTypeOptionSelect",
			Handler:    _SysService_DictTypeOptionSelect_Handler,
		},
		{
			MethodName: "SaveLoginlog",
			Handler:    _SysService_SaveLoginlog_Handler,
		},
		{
			MethodName: "LoginlogList",
			Handler:    _SysService_LoginlogList_Handler,
		},
		{
			MethodName: "LoginlogDelete",
			Handler:    _SysService_LoginlogDelete_Handler,
		},
		{
			MethodName: "LoginlogClear",
			Handler:    _SysService_LoginlogClear_Handler,
		},
		{
			MethodName: "SaveUserOnline",
			Handler:    _SysService_SaveUserOnline_Handler,
		},
		{
			MethodName: "OperLogList",
			Handler:    _SysService_OperLogList_Handler,
		},
		{
			MethodName: "OperLogInfo",
			Handler:    _SysService_OperLogInfo_Handler,
		},
		{
			MethodName: "OperLogDelete",
			Handler:    _SysService_OperLogDelete_Handler,
		},
		{
			MethodName: "OperLogClear",
			Handler:    _SysService_OperLogClear_Handler,
		},
		{
			MethodName: "OperLogSave",
			Handler:    _SysService_OperLogSave_Handler,
		},
		{
			MethodName: "ApisInfo",
			Handler:    _SysService_ApisInfo_Handler,
		},
		{
			MethodName: "ApisList",
			Handler:    _SysService_ApisList_Handler,
		},
		{
			MethodName: "ApisTreeList",
			Handler:    _SysService_ApisTreeList_Handler,
		},
		{
			MethodName: "ApisAdd",
			Handler:    _SysService_ApisAdd_Handler,
		},
		{
			MethodName: "ApisUpdate",
			Handler:    _SysService_ApisUpdate_Handler,
		},
		{
			MethodName: "ApisDelete",
			Handler:    _SysService_ApisDelete_Handler,
		},
		{
			MethodName: "DeptDetail",
			Handler:    _SysService_DeptDetail_Handler,
		},
		{
			MethodName: "DeptList",
			Handler:    _SysService_DeptList_Handler,
		},
		{
			MethodName: "DeptTree",
			Handler:    _SysService_DeptTree_Handler,
		},
		{
			MethodName: "DeptCreate",
			Handler:    _SysService_DeptCreate_Handler,
		},
		{
			MethodName: "DeptUpdate",
			Handler:    _SysService_DeptUpdate_Handler,
		},
		{
			MethodName: "DeptDelete",
			Handler:    _SysService_DeptDelete_Handler,
		},
		{
			MethodName: "PostDetail",
			Handler:    _SysService_PostDetail_Handler,
		},
		{
			MethodName: "PostList",
			Handler:    _SysService_PostList_Handler,
		},
		{
			MethodName: "PostCreate",
			Handler:    _SysService_PostCreate_Handler,
		},
		{
			MethodName: "PostUpdate",
			Handler:    _SysService_PostUpdate_Handler,
		},
		{
			MethodName: "PostDelete",
			Handler:    _SysService_PostDelete_Handler,
		},
		{
			MethodName: "ConfigDetail",
			Handler:    _SysService_ConfigDetail_Handler,
		},
		{
			MethodName: "ConfigInfoByKey",
			Handler:    _SysService_ConfigInfoByKey_Handler,
		},
		{
			MethodName: "ConfigList",
			Handler:    _SysService_ConfigList_Handler,
		},
		{
			MethodName: "ConfigCreate",
			Handler:    _SysService_ConfigCreate_Handler,
		},
		{
			MethodName: "ConfigUpdate",
			Handler:    _SysService_ConfigUpdate_Handler,
		},
		{
			MethodName: "ConfigDelete",
			Handler:    _SysService_ConfigDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sys/v1/sys.proto",
}
